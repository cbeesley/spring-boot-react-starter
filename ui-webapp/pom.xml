<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
		 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>com.thoughtpeak</groupId>
		<artifactId>starter</artifactId>
		<version>1.0.0.RELEASE</version>
		<relativePath>../pom.xml</relativePath>
	</parent>

	<groupId>com.thoughtpeak.starter</groupId>
	<artifactId>ui-webapp</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>war</packaging>

	<name>UI web app</name>
	<description>Main user interface</description>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<java.version>1.8</java.version>
	</properties>

	<dependencies>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
		</dependency>
		<dependency>
			<groupId>org.webjars</groupId>
			<artifactId>webjars-locator</artifactId>
			<version>0.30</version>
		</dependency>
		<dependency>
			<groupId>org.webjars</groupId>
			<artifactId>bootstrap</artifactId>
			<version>4.1.1</version>
		</dependency>
		<dependency>
			<groupId>org.webjars</groupId>
			<artifactId>font-awesome</artifactId>
			<version>5.1.0</version>
		</dependency>
		<dependency>
			<groupId>org.webjars</groupId>
			<artifactId>popper.js</artifactId>
			<version>1.14.3</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
			<version>3.4</version>
		</dependency>
		<dependency>
			<groupId>com.google.guava</groupId>
			<artifactId>guava</artifactId>
			<version>21.0</version>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.12</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.thoughtpeak.starter</groupId>
			<artifactId>data-access</artifactId>
			<version>0.0.1-SNAPSHOT</version>
		</dependency>

	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<mainClass>com.thoughtpeak.starter.Application</mainClass>
				</configuration>
			</plugin>

			<!-- tag::frontend-maven-plugin[] -->
			<plugin>
				<groupId>org.codehaus.groovy.maven</groupId>
				<artifactId>gmaven-plugin</artifactId>
				<executions>
					<execution>
						<id>webpack</id>
						<phase>process-resources</phase>
						<goals>
							<goal>execute</goal>
						</goals>
						<configuration>
							<source><![CDATA[
								/*
                                 * If running in Jetty - compile jsx files when they change
                                 * Otherwise just compile them once
                                 */
								boolean isBootRun = false
								List<String> goals = session.getGoals()
								for (String s : goals)
									//println("Goal " + s)
									if (s.equals('spring-boot:run'))
										isBootRun = true
								if (isBootRun) {
									def proc_webpack = new ProcessBuilder(["npx", "webpack", "--watch"]).inheritIO().directory(project.getBasedir()).start()
								} else { // Build the javascript files and copy into target
									println "Compiling javascript ..."
									def webpack = new ProcessBuilder(["/usr/local/bin/npx", "webpack"]).inheritIO().directory(project.getBasedir())
									//def env = webpack.environment()
									//env.put("WAR_NAME", project.build.finalName)$
									def proc_webpack = webpack.start()
									proc_webpack.waitForOrKill(120000)
									if(proc_webpack.exitValue() != 0)
										throw new org.apache.maven.plugin.MojoFailureException("Error compiling client code")
								}
								]]></source>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- end::frontend-maven-plugin[] -->
		</plugins>
	</build>

</project>
